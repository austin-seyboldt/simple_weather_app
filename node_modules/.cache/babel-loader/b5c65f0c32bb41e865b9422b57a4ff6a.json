{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/austin/Desktop/side_projects/simple_weather_app/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"../css/App.css\";\nimport MainTile from \"./MainTile\";\nimport FetchWeatherData from \"../FetchWeatherData\";\nimport DefaultData from \"../DefaultData\";\n\nconst App = () => {\n  _s();\n\n  const getCurrentConditions = () => {\n    const {\n      current\n    } = currentLocationData;\n    const dayConditions = currentLocationData.forecast.forecastday[0].day;\n    const {\n      mintemp_f,\n      maxtemp_f,\n      mintemp_c,\n      maxtemp_c\n    } = dayConditions;\n    [current.mintemp_f, current.maxtemp_f, current.mintemp_c, current.maxtemp_c] = [mintemp_f, maxtemp_f, mintemp_c, maxtemp_c];\n    return current;\n  };\n\n  const getForecast = () => {\n    return currentLocationData.forecast;\n  };\n\n  const updateLocation = newLocation => {\n    console.log(\"in update location\");\n\n    if (newLocation === currentLocation || newLocation == \"\") {\n      return;\n    } else {\n      setLocation(newLocation);\n    }\n  };\n\n  const [currentLocation, setLocation] = useState(\"\");\n  const [currentLocationData, setLocationData] = useState();\n  const [forecast, setForecast] = useState();\n  const [currentConditions, setCurrentConditions] = useState(getCurrentConditions());\n  useEffect(() => {\n    FetchWeatherData(currentLocation, setLocationData);\n    setForecast(() => getForecast());\n    setCurrentConditions(() => getCurrentConditions());\n  }, [currentLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(MainTile, {\n      currentConditions: currentConditions,\n      forecast: forecast,\n      location: currentLocationData.location,\n      updateLocation: updateLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"19dB1vSJBK71bx9sJX1ELRlAWGY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/austin/Desktop/side_projects/simple_weather_app/src/components/App.js"],"names":["React","useState","useEffect","MainTile","FetchWeatherData","DefaultData","App","getCurrentConditions","current","currentLocationData","dayConditions","forecast","forecastday","day","mintemp_f","maxtemp_f","mintemp_c","maxtemp_c","getForecast","updateLocation","newLocation","console","log","currentLocation","setLocation","setLocationData","setForecast","currentConditions","setCurrentConditions","location"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAMC,oBAAoB,GAAG,MAAM;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAcC,mBAApB;AACA,UAAMC,aAAa,GAAGD,mBAAmB,CAACE,QAApB,CAA6BC,WAA7B,CAAyC,CAAzC,EAA4CC,GAAlE;AACA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA,SAAxB;AAAmCC,MAAAA;AAAnC,QAAiDP,aAAvD;AACA,KACIF,OAAO,CAACM,SADZ,EAEIN,OAAO,CAACO,SAFZ,EAGIP,OAAO,CAACQ,SAHZ,EAIIR,OAAO,CAACS,SAJZ,IAKI,CAACH,SAAD,EAAYC,SAAZ,EAAuBC,SAAvB,EAAkCC,SAAlC,CALJ;AAOA,WAAOT,OAAP;AACH,GAZD;;AAcA,QAAMU,WAAW,GAAG,MAAM;AACtB,WAAOT,mBAAmB,CAACE,QAA3B;AACH,GAFD;;AAIA,QAAMQ,cAAc,GAAIC,WAAD,IAAiB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AACA,QAAIF,WAAW,KAAKG,eAAhB,IAAmCH,WAAW,IAAI,EAAtD,EAA0D;AACtD;AACH,KAFD,MAEO;AACHI,MAAAA,WAAW,CAACJ,WAAD,CAAX;AACH;AACJ,GAPD;;AASA,QAAM,CAACG,eAAD,EAAkBC,WAAlB,IAAiCvB,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM,CAACQ,mBAAD,EAAsBgB,eAAtB,IAAyCxB,QAAQ,EAAvD;AACA,QAAM,CAACU,QAAD,EAAWe,WAAX,IAA0BzB,QAAQ,EAAxC;AACA,QAAM,CAAC0B,iBAAD,EAAoBC,oBAApB,IAA4C3B,QAAQ,CACtDM,oBAAoB,EADkC,CAA1D;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,gBAAgB,CAACmB,eAAD,EAAkBE,eAAlB,CAAhB;AACAC,IAAAA,WAAW,CAAC,MAAMR,WAAW,EAAlB,CAAX;AACAU,IAAAA,oBAAoB,CAAC,MAAMrB,oBAAoB,EAA3B,CAApB;AACH,GAJQ,EAIN,CAACgB,eAAD,CAJM,CAAT;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACI,QAAC,QAAD;AACI,MAAA,iBAAiB,EAAEI,iBADvB;AAEI,MAAA,QAAQ,EAAEhB,QAFd;AAGI,MAAA,QAAQ,EAAEF,mBAAmB,CAACoB,QAHlC;AAII,MAAA,cAAc,EAAEV;AAJpB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAnDD;;GAAMb,G;;KAAAA,G;AAqDN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../css/App.css\";\nimport MainTile from \"./MainTile\";\nimport FetchWeatherData from \"../FetchWeatherData\";\nimport DefaultData from \"../DefaultData\";\n\nconst App = () => {\n    const getCurrentConditions = () => {\n        const { current } = currentLocationData;\n        const dayConditions = currentLocationData.forecast.forecastday[0].day;\n        const { mintemp_f, maxtemp_f, mintemp_c, maxtemp_c } = dayConditions;\n        [\n            current.mintemp_f,\n            current.maxtemp_f,\n            current.mintemp_c,\n            current.maxtemp_c,\n        ] = [mintemp_f, maxtemp_f, mintemp_c, maxtemp_c];\n\n        return current;\n    };\n\n    const getForecast = () => {\n        return currentLocationData.forecast;\n    };\n\n    const updateLocation = (newLocation) => {\n        console.log(\"in update location\");\n        if (newLocation === currentLocation || newLocation == \"\") {\n            return;\n        } else {\n            setLocation(newLocation);\n        }\n    };\n\n    const [currentLocation, setLocation] = useState(\"\");\n    const [currentLocationData, setLocationData] = useState();\n    const [forecast, setForecast] = useState();\n    const [currentConditions, setCurrentConditions] = useState(\n        getCurrentConditions()\n    );\n\n    useEffect(() => {\n        FetchWeatherData(currentLocation, setLocationData);\n        setForecast(() => getForecast());\n        setCurrentConditions(() => getCurrentConditions());\n    }, [currentLocation]);\n\n    return (\n        <div className=\"app\">\n            <MainTile\n                currentConditions={currentConditions}\n                forecast={forecast}\n                location={currentLocationData.location}\n                updateLocation={updateLocation}\n            />\n        </div>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}