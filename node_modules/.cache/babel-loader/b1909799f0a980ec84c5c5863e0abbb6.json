{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/austin/Desktop/side_projects/simple_weather_app/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"../css/App.css\";\nimport MainTile from \"./MainTile\";\nimport FetchWeatherData from \"../FetchWeatherData\";\n\nconst App = () => {\n  _s();\n\n  const getCurrentConditions = () => {\n    const {\n      current\n    } = currentLocationData;\n    const dayConditions = currentLocationData.forecast.forecastday[0].day;\n    const {\n      mintemp_f,\n      maxtemp_f,\n      mintemp_c,\n      maxtemp_c\n    } = dayConditions;\n    [current.mintemp_f, current.maxtemp_f, current.mintemp_c, current.maxtemp_c] = [mintemp_f, maxtemp_f, mintemp_c, maxtemp_c];\n    return current;\n  };\n\n  const getForecast = () => {\n    return currentLocationData.forecast;\n  };\n\n  const getNewLocationData = newLocation => {\n    if (currentLocation === newLocation) {\n      return;\n    }\n\n    setLocationData(() => {\n      FetchWeatherData(newLocation);\n    });\n  };\n\n  useEffect(() => {\n    setLocationData(getNewLocationData);\n    return () => {\n      cleanup;\n    };\n  }, [currentLocation]);\n  const [currentLocation, setLocation] = useState(\"New York\");\n  const [currentLocationData, setLocationData] = useState({});\n  const [currentConditions, setCurrentConditions] = useState(getCurrentConditions());\n  const [forecast, setForecast] = useState(() => getForecast);\n  console.log(currentLocationData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(MainTile, {\n      currentConditions: currentConditions,\n      forecast: forecast,\n      location: currentLocationData.location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"8otWP9BPt8y/wZ5cYCzaOR2i0YI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/austin/Desktop/side_projects/simple_weather_app/src/components/App.js"],"names":["React","useState","MainTile","FetchWeatherData","App","getCurrentConditions","current","currentLocationData","dayConditions","forecast","forecastday","day","mintemp_f","maxtemp_f","mintemp_c","maxtemp_c","getForecast","getNewLocationData","newLocation","currentLocation","setLocationData","useEffect","cleanup","setLocation","currentConditions","setCurrentConditions","setForecast","console","log","location"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,gBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAMC,oBAAoB,GAAG,MAAM;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAcC,mBAApB;AACA,UAAMC,aAAa,GAAGD,mBAAmB,CAACE,QAApB,CAA6BC,WAA7B,CAAyC,CAAzC,EAA4CC,GAAlE;AACA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA,SAAxB;AAAmCC,MAAAA;AAAnC,QAAiDP,aAAvD;AACA,KACIF,OAAO,CAACM,SADZ,EAEIN,OAAO,CAACO,SAFZ,EAGIP,OAAO,CAACQ,SAHZ,EAIIR,OAAO,CAACS,SAJZ,IAKI,CAACH,SAAD,EAAYC,SAAZ,EAAuBC,SAAvB,EAAkCC,SAAlC,CALJ;AAOA,WAAOT,OAAP;AACH,GAZD;;AAcA,QAAMU,WAAW,GAAG,MAAM;AACtB,WAAOT,mBAAmB,CAACE,QAA3B;AACH,GAFD;;AAIA,QAAMQ,kBAAkB,GAAIC,WAAD,IAAiB;AACxC,QAAIC,eAAe,KAAKD,WAAxB,EAAqC;AACjC;AACH;;AACDE,IAAAA,eAAe,CAAC,MAAM;AAClBjB,MAAAA,gBAAgB,CAACe,WAAD,CAAhB;AACH,KAFc,CAAf;AAGH,GAPD;;AASAG,EAAAA,SAAS,CAAC,MAAM;AACZD,IAAAA,eAAe,CAACH,kBAAD,CAAf;AACA,WAAO,MAAM;AACTK,MAAAA,OAAO;AACV,KAFD;AAGH,GALQ,EAKN,CAACH,eAAD,CALM,CAAT;AAOA,QAAM,CAACA,eAAD,EAAkBI,WAAlB,IAAiCtB,QAAQ,CAAC,UAAD,CAA/C;AACA,QAAM,CAACM,mBAAD,EAAsBa,eAAtB,IAAyCnB,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAACuB,iBAAD,EAAoBC,oBAApB,IAA4CxB,QAAQ,CACtDI,oBAAoB,EADkC,CAA1D;AAGA,QAAM,CAACI,QAAD,EAAWiB,WAAX,IAA0BzB,QAAQ,CAAC,MAAMe,WAAP,CAAxC;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYrB,mBAAZ;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACI,QAAC,QAAD;AACI,MAAA,iBAAiB,EAAEiB,iBADvB;AAEI,MAAA,QAAQ,EAAEf,QAFd;AAGI,MAAA,QAAQ,EAAEF,mBAAmB,CAACsB;AAHlC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CApDD;;GAAMzB,G;;KAAAA,G;AAsDN,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"../css/App.css\";\nimport MainTile from \"./MainTile\";\nimport FetchWeatherData from \"../FetchWeatherData\";\n\nconst App = () => {\n    const getCurrentConditions = () => {\n        const { current } = currentLocationData;\n        const dayConditions = currentLocationData.forecast.forecastday[0].day;\n        const { mintemp_f, maxtemp_f, mintemp_c, maxtemp_c } = dayConditions;\n        [\n            current.mintemp_f,\n            current.maxtemp_f,\n            current.mintemp_c,\n            current.maxtemp_c,\n        ] = [mintemp_f, maxtemp_f, mintemp_c, maxtemp_c];\n\n        return current;\n    };\n\n    const getForecast = () => {\n        return currentLocationData.forecast;\n    };\n\n    const getNewLocationData = (newLocation) => {\n        if (currentLocation === newLocation) {\n            return;\n        }\n        setLocationData(() => {\n            FetchWeatherData(newLocation);\n        });\n    };\n\n    useEffect(() => {\n        setLocationData(getNewLocationData);\n        return () => {\n            cleanup;\n        };\n    }, [currentLocation]);\n\n    const [currentLocation, setLocation] = useState(\"New York\");\n    const [currentLocationData, setLocationData] = useState({});\n    const [currentConditions, setCurrentConditions] = useState(\n        getCurrentConditions()\n    );\n    const [forecast, setForecast] = useState(() => getForecast);\n\n    console.log(currentLocationData);\n    return (\n        <div className=\"app\">\n            <MainTile\n                currentConditions={currentConditions}\n                forecast={forecast}\n                location={currentLocationData.location}\n            />\n        </div>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}