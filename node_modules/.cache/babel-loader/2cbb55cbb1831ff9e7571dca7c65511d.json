{"ast":null,"code":"import WeatherApiInfo from \"./WeatherApiInfo\";\nimport DefaultData from \"./DefaultData\";\nimport FetchIp from \"./FetchIp\";\nimport IpDataInfo from \"./IpDataApiInfo\";\n\nconst FetchWeatherData = async (location, setLocationData) => {\n  if (location == \"\") {\n    try {\n      let ipRequest = new Request(IpDataInfo.requestURL);\n      const response = await fetch(ipRequest).then(response => response.json());\n      console.log(response);\n    } catch (error) {\n      console.log(\"Failed to fetch current location from ip address\", error);\n    }\n  }\n\n  console.log(\"fetching new data\");\n  const api_key = WeatherApiInfo.key;\n  const baseRequestURL = WeatherApiInfo.baseRequestURL;\n  const forecastEndpoint = WeatherApiInfo.forecastEndpoint;\n\n  if (typeof location == \"undefined\" || location == null) {\n    location = \"auto:ip\";\n  }\n\n  const dayCount = 1;\n  let forecastRequest = new Request(`${baseRequestURL}${forecastEndpoint}?key=${api_key}&q=${location}&days=${dayCount}`);\n\n  try {\n    const response = await fetch(forecastRequest);\n\n    if (!response.ok) {\n      console.log(\"request failed\");\n      return;\n    }\n\n    let data = await response.json();\n    console.log(data);\n    setLocationData(data);\n    return;\n  } catch (err) {\n    console.log(\"error occurred\");\n  }\n};\n\n_c = FetchWeatherData;\nexport default FetchWeatherData;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchWeatherData\");","map":{"version":3,"sources":["/home/austin/Desktop/side_projects/simple_weather_app/src/FetchWeatherData.js"],"names":["WeatherApiInfo","DefaultData","FetchIp","IpDataInfo","FetchWeatherData","location","setLocationData","ipRequest","Request","requestURL","response","fetch","then","json","console","log","error","api_key","key","baseRequestURL","forecastEndpoint","dayCount","forecastRequest","ok","data","err"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;;AAEA,MAAMC,gBAAgB,GAAG,OAAOC,QAAP,EAAiBC,eAAjB,KAAqC;AAC1D,MAAID,QAAQ,IAAI,EAAhB,EAAoB;AAChB,QAAI;AACA,UAAIE,SAAS,GAAG,IAAIC,OAAJ,CAAYL,UAAU,CAACM,UAAvB,CAAhB;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,SAAD,CAAL,CAAiBK,IAAjB,CAAuBF,QAAD,IACzCA,QAAQ,CAACG,IAAT,EADmB,CAAvB;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACH,KAND,CAME,OAAOM,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CACI,kDADJ,EAEIC,KAFJ;AAIH;AACJ;;AAEDF,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,QAAME,OAAO,GAAGjB,cAAc,CAACkB,GAA/B;AACA,QAAMC,cAAc,GAAGnB,cAAc,CAACmB,cAAtC;AACA,QAAMC,gBAAgB,GAAGpB,cAAc,CAACoB,gBAAxC;;AACA,MAAI,OAAOf,QAAP,IAAmB,WAAnB,IAAkCA,QAAQ,IAAI,IAAlD,EAAwD;AACpDA,IAAAA,QAAQ,GAAG,SAAX;AACH;;AACD,QAAMgB,QAAQ,GAAG,CAAjB;AAEA,MAAIC,eAAe,GAAG,IAAId,OAAJ,CACjB,GAAEW,cAAe,GAAEC,gBAAiB,QAAOH,OAAQ,MAAKZ,QAAS,SAAQgB,QAAS,EADjE,CAAtB;;AAIA,MAAI;AACA,UAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACW,eAAD,CAA5B;;AACA,QAAI,CAACZ,QAAQ,CAACa,EAAd,EAAkB;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACH;;AACD,QAAIS,IAAI,GAAG,MAAMd,QAAQ,CAACG,IAAT,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACAlB,IAAAA,eAAe,CAACkB,IAAD,CAAf;AACA;AACH,GAVD,CAUE,OAAOC,GAAP,EAAY;AACVX,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;AACJ,CA1CD;;KAAMX,gB;AA4CN,eAAeA,gBAAf","sourcesContent":["import WeatherApiInfo from \"./WeatherApiInfo\";\nimport DefaultData from \"./DefaultData\";\nimport FetchIp from \"./FetchIp\";\nimport IpDataInfo from \"./IpDataApiInfo\";\n\nconst FetchWeatherData = async (location, setLocationData) => {\n    if (location == \"\") {\n        try {\n            let ipRequest = new Request(IpDataInfo.requestURL);\n            const response = await fetch(ipRequest).then((response) =>\n                response.json()\n            );\n            console.log(response);\n        } catch (error) {\n            console.log(\n                \"Failed to fetch current location from ip address\",\n                error\n            );\n        }\n    }\n\n    console.log(\"fetching new data\");\n    const api_key = WeatherApiInfo.key;\n    const baseRequestURL = WeatherApiInfo.baseRequestURL;\n    const forecastEndpoint = WeatherApiInfo.forecastEndpoint;\n    if (typeof location == \"undefined\" || location == null) {\n        location = \"auto:ip\";\n    }\n    const dayCount = 1;\n\n    let forecastRequest = new Request(\n        `${baseRequestURL}${forecastEndpoint}?key=${api_key}&q=${location}&days=${dayCount}`\n    );\n\n    try {\n        const response = await fetch(forecastRequest);\n        if (!response.ok) {\n            console.log(\"request failed\");\n            return;\n        }\n        let data = await response.json();\n        console.log(data);\n        setLocationData(data);\n        return;\n    } catch (err) {\n        console.log(\"error occurred\");\n    }\n};\n\nexport default FetchWeatherData;\n"]},"metadata":{},"sourceType":"module"}